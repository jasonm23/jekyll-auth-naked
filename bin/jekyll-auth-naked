#!/usr/bin/env ruby
# Command-line interface for jekyll-auth-naked

require 'rubygems'
require 'active_support/core_ext'
require 'commander/import'
require 'rake'
require 'jekyll-auth-naked'
require 'git'

def changed?
  git = Git.init
  git.diff('HEAD', 'config.ru').entries.length != 0
end

program :version, JekyllAuthNaked::VERSION

program :description, <<-DESCRIPTION
A simple way to use Github Oauth to serve a protected jekyll site to your GitHub organization
DESCRIPTION

command :new do |c|

  c.syntax = 'jekyll-auth-naked new'

  c.description = "Initialize an existing Jekyll site as a Jekyll Auth site"

  c.action do |args, options|

    source = File.expand_path( "../", File.dirname(__FILE__) )

    destination = Dir.pwd

    say "Initiating new Jekyll Auth site in #{destination}"

    ["config.ru", ".gitignore"].each do |file|
      if File.exist? "#{destination}/#{file}"
        say "* #{destination}/#{file} already exists... skipping."
      else
        say "* creating #{destination}/#{file}"
        FileUtils.cp "#{source}/#{file}", "#{destination}/#{file}"
      end
    end

    if changed?
      system "git status"
      say <<-CHANGES.strip_heredoc
      Looks like you've made some changes, you may want to do a git
      commit and git push sometime soon
      CHANGES
    end

    say <<-COMPLETE
    Setup complete. Run jekyll-auth-naked to view the authenticated site.
    COMPLETE

  end
end

command :setup do |c|

  c.syntax = "jekyll-auth-naked setup"

  c.description = "Configure your Jekyll Auth Naked site"

  c.action do |args, options|
    git = Git.init

    git.add "config.ru"

    if changed?
      git.commit "[Jekyll Auth Naked] Initial setup"
    end

    say "Awesome. Let's config our GitHub settings."

    client_id = ask "What's your GitHub Client ID? "
    client_secret = ask "What's your GitHub Client Secret? "
    team_id = ask "What's your GitHub Team ID?"

    config_env = <<-EOConfig.strip_heredoc
    GITHUB_TEAM_ID=#{team_id}
    GITHUB_CLIENT_ID=#{client_id}
    GITHUB_CLIENT_SECRET=#{client_secret}
    EOConfig

    if File.exist? ".env"
      say "You already have a .env, make sure it has these vars..."
      say config_env
    else
      File.open(".env", "w") do |f|
        f.puts config_env
      end
    end
  end
end

command :serve do |c|
  c.syntax = "jekyll-auth-naked serve"
  c.description = "Run Jekyll Auth site locally"
  c.action do |args, options|

    # Ensure environmental variables are set
    ["GITHUB_CLIENT_ID", "GITHUB_CLIENT_SECRET"].each do |var|
      next unless ENV[var].nil?

      say <<-WHOOPS.strip_heredoc

      Whoops. Looks like you forgot to tell Jekyll Auth Naked about
      your app" Be sure to add these vars to the project's `.env`

      GITHUB_CLIENT_ID=[client id]
      GITHUB_CLIENT_SECRET=[client secret]
      GITHUB_TEAM_ID=[team id]

      See the readme for more information on where to find these
      WHOOPS

      exit(1)
    end

    # build site
    command(:build).run

    say <<-SPIN_UP.strip_heredoc
    Spinning up the server with authentication. Use CTRL-C to stop.
    To preview the site without authentication, use `jekyll serve`
    SPIN_UP

    sh "bundle exec rackup -p 4000"

  end
end

# Run the standard jekyll build command
# Called by Rake task, to allow the gem
# to add functionality here in the future
command :build do |c|
  c.syntax = 'jekyll-auth build'
  c.description = "Build Jekyll site"
  c.action do |args, options|
    say "building the site..."
    sh "bundle exec jekyll build"
    say "site built."
  end
end

default_command :serve
